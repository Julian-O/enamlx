from atom.api import (Atom, Unicode, Range, List, Bool, ForwardInstance)

from enamlx.widgets.api import (
    TreeView, TreeViewItem, TreeViewColumn, 
)

from enaml.widgets.api import (
    Window, Container, PushButton, CheckBox, RadioButton
)
from enaml.core.looper import Looper
from enaml.widgets.spin_box import SpinBox
from atom.instance import ForwardInstance



class Person(Atom):
    """ A simple class representing a person object.

    """
    last_name = Unicode()

    first_name = Unicode()
    
    children = List(ForwardInstance(lambda:Person))

    age = Range(low=0)

    debug = Bool(False)

class Model(Atom):
    people = List(Person)
    
    def add_person(self):
        people = self.people[:]
        person = Person(last_name='Doe',first_name='John',age=len(self.people))
        people.append(person)
        self.people = people
    
    def remove_person(self):
        people = self.people[:]
        people.pop()
        self.people = people


enamldef Main(Window):
    attr model = Model(people=[
                    Person(last_name='Jones-%i'%i,first_name='Bob-%i'%i,age=i,children=[
                        Person(last_name='Lill-%i'%i,first_name='Jill-%i'%i,age=i+1),
                        Person(last_name='Wack-%i'%i,first_name='Jack-%i'%i,age=i+2),
                        ]
                    ) for i in range(1000)])
    Container:
        PushButton:
            text = 'Add person'
            clicked :: model.add_person()
        PushButton:
            text = 'Remove person'
            clicked :: model.remove_person()
            
        TreeView:
            headers << ['#','Debug','First','Last','Age']
            #TreeViewItem:
            #   text = 'People'
            Looper:
                iterable << model.people
                TreeViewItem: 
                    text << str(loop_index)
                    
                    
                    TreeViewColumn:
                        checkable = True
                        checked := loop_item.debug
                    TreeViewColumn:
                        text << loop_item.first_name
                    TreeViewColumn:
                        text << loop_item.last_name
                
                    TreeViewColumn:
                        SpinBox:
                            value << loop_item.age
                    
                    
                    attr parent_index = loop_index
                    attr parent_item = loop_item
                    Looper:
                        iterable << loop_item.children
                        TreeViewItem: # Child item
                            text << 'child %s.%s'%(parent_index,loop_index)
                            TreeViewColumn:
                                checkable = True
                                checked := loop_item.debug
                            TreeViewColumn:
                                text << loop_item.first_name
                            TreeViewColumn:
                                text << loop_item.last_name
                            TreeViewColumn:
                                #text << str(loop_item.age)
                                SpinBox:
                                    value << loop_item.age
                
                # Going arbitrarily deep?
                