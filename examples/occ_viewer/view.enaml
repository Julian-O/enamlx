'''
Created on Sep 28, 2016

@author: jrm
'''
from atom.api import Atom
from enaml.layout.api import (
    HSplitLayout, VSplitLayout, TabLayout, InsertItem, 
    hbox, vbox, spacer
)
from enaml.widgets.api import (
    Window, DockArea, DockItem,  Form, GroupBox, ScrollArea,
    Notebook, Page, SpinBox, Container, Label, Menu, Action
)
from enaml.widgets.dock_events import DockItemEvent
from enaml.core.api import Conditional, Include, Looper, DynamicTemplate
#: TODO: Breaks proxy pattern...
from enaml.qt.QtCore import Qt
from enamlx.widgets.api import (
    OccViewer, TreeView, TreeViewItem, TreeViewColumn
)
from advanced import AutoForm

from occ.part import Part
from occ.shape import Shape

from examples.shapes import PrimativeShapes
from examples.operations import Operations
from examples.draw import Draw
from examples.exhaust_flange import ExhaustFlange
from examples.turners_cube import TurnersCube
from examples.bottle import Bottle
from examples.house import House
from examples.sweeps import Sweeps
from examples.thru_sections import ThruSection

template TreeItemLoop(items):
    """ A templated loop which maps a template over a sequence."""
    TreeItemLoop(tuple(items[:-1])):
        pass
    AutoTreeItem:
        item = items[-1]
  
template TreeItemLoop(items: ()):
    """ The terminating condition for the templated loop."""
    pass

template AutoTreeItemNode(item):
    """ Template for tree item nodes. This defines
        the columns and how the tree will be walked.
    """
    TreeViewColumn:
        text << str(item)
    TreeItemLoop(tuple([c for c in item.children if isinstance(c,Shape)])):
        pass

enamldef AutoTreeItem(TreeViewItem):
    attr item
    text = str(item)
    items << [c for c in item.children if isinstance(c,Shape)]
    DynamicTemplate:
        base = AutoTreeItemNode
        args = (item,)

enamldef ModelViewer(OccViewer): viewer:
    attr p0 = None
#     on_mouse_press::
#         display, event = change['value']
#         #print 'mouse_press',event
#         pt = event.pos()
#         if event.button() == Qt.LeftButton:
#             display.Select(pt.x(), pt.y())
#         #viewer.p0 = display.View.Convert(pt.x(),pt.y())
#             #raise StopIteration
    on_mouse_move::
        display, event = change['value']
        pt = event.pos()
        display.MoveTo(pt.x(),pt.y())
        
        #: Drag selected object
        if event.buttons() == Qt.LeftButton:
            p0 = viewer.p0
            p1 =  display.View.Convert(pt.x(),pt.y())
            viewer.p0 = p1
            if viewer.selection and p0:
                dx,dy,dz = p1[0]-p0[0],p1[1]-p0[1],0 
                for item in viewer.selection:
                    item.position = (item.x+dx,item.y+dy,item.z)
            
                raise StopIteration
        else:
            viewer.p0 = None
    #on_mouse_release::
    #    display, event = change['value']
    #    print 'mouse_release',event
    #    raise StopIteration
    Menu:
        context_menu = True
        Action:
            text = 'Fit all'
            triggered :: viewer.proxy.display.FitAll()
        Menu:
            title = 'View'
            Looper:
                iterable << viewer.get_member('view_mode').items
                Action:
                    text << loop_item
                    triggered :: viewer.view_mode = loop_item

enamldef Main(Window): window:
    minimum_size = (960,540)
    attr models = [
        PrimativeShapes(),
        Operations(),
        Sweeps(),
        ThruSection(),
        Draw(),
        TurnersCube(),
        ExhaustFlange(),
        Bottle(),
        House(),
        
    ]
    attr viewer = None
    Container:
        padding = 0   
        DockArea:
            layout = HSplitLayout(
                    VSplitLayout(
                    'model',
                    'properties',
                    sizes=[50,50],
                ),
                TabLayout(*['viewer{}'.format(i) for i in range(len(window.models))]),
                sizes=[30,70]
            )
            dock_events_enabled = True
            dock_event::
                event = change['value']
                if event.type==DockItemEvent.TabSelected:
                    item = self.find(event.name)
                    if event.name.startswith('viewer'):
                        viewer = item.children[0].children[0]
                        if window.viewer:
                            window.viewer.selection = []
                        window.viewer = viewer
                        viewer.proxy.display.OnResize()
                #print event.name,event.type
            
            DockItem:
                title = 'Model'
                name = 'model'
                Container:
                    padding = 0
                    TreeView:
                        horizontal_headers = ['Item']
                        horizontal_stretch = True
                        items << [c for c in viewer.children if isinstance(c,(Shape,Part))] if viewer else []
                        selection :: 
                            if viewer:
                                viewer.selection = [node.item for node in change['value']]
                        Looper:
                            iterable << parent.items
                            AutoTreeItem:
                                item = loop_item
                                
            
            DockItem:
                title = 'Properties'
                name = 'properties'
                Container:
                    padding = 0
                    ScrollArea:
                        Container:
                            Conditional:
                                condition << viewer is not None
                                Looper:
                                    iterable << viewer.selection
                                    GroupBox:
                                        title << "{}".format(loop_item)
                                        AutoForm:
                                            model = loop_item

            Looper:
                iterable << window.models 
                DockItem:
                    title = loop_item.name
                    name = 'viewer{}'.format(loop_index)
                    Container:
                        padding = 0
                        ModelViewer: #viewer:
                            Include:
                                objects << [loop_item]
