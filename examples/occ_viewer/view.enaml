import math
from atom.api import Atom
from enaml.layout.api import (
    HSplitLayout, VSplitLayout, TabLayout, InsertItem, 
    hbox, vbox, spacer
)
from enaml.widgets.api import (
    Window, DockArea, DockItem, Form, GroupBox, ScrollArea,
    Notebook, Page,
    SpinBox, Container, Label, Menu, Action
)
from enaml.core.api import Conditional, Include, Looper
#: TODO: Breaks proxy pattern...
from enaml.qt.QtCore import Qt
from enamlx.widgets.api import OccViewer, DoubleSpinBox
from advanced import AutoForm

from occ.solid import Box, Cone, Cylinder, Sphere, Wedge, Torus
from occ.draw import Line, Wire, Circle, Ellipse, Parabola, Hyperbola, Point, Vertex
from occ.algo import Common, Cut, Fuse, Fillet, Chamfer
from occ.shape import Shape

# enamldef Model2():
#     Box: box:
#         position = (10,0,0)
#         dx = 10
#         dy = 2
#         dz = 5
#          
#     Cone: cone:
#         position = (0,10,0)
#         radius = 1
#         height = 5
#      
#     Cylinder: cylinder:
#         position = (10,10,0)
#         radius = 2
#         #angle = math.pi/2.0
#          
#     Sphere: sphere:
#         position = (0,0,0)
#         radius = 3
#         #angle = 1.5*math.pi
#          
#     Wedge: wedge:
#         position = (-10,0,0)
#         dy = 2
#      
#     Torus:
#         position = (-10,-10,0)
#         radius = 2
#         radius2 = 0.4
#         angle = math.pi


enamldef Main(Window): window:
    minimum_size = (960,540)
    #attr active_model = [Model()]
    Container:
        padding = 0   
        DockArea:
            layout = HSplitLayout(
                'properties',
                TabLayout(
                    'model1',
                    'model2',
                    'model3'
                ),
                sizes=[10,90]
            )
            DockItem:
                title = 'Properties'
                name = 'properties'
                stretch = 0
                Container:
                    padding = 0

                    Notebook: notebook:
                        #tab_style = 'preferences'
                        Conditional:
                            condition << bool(viewer.selection and isinstance(viewer.selection[0],Atom))
#                             Page:
#                                 closable = False
#                                 title << '{}'.format(viewer.selection[0].__class__.__name__)
#                                 Container:
#                                     padding = 0
#                                     
#                                     AutoForm:
#                                         model << viewer.selection[0]
                            Looper:
                                iterable << viewer.selection[0].children
                                Page:
                                    closable = False
                                    title = '{}'.format(loop_item.__class__.__name__)
                                    Container:
                                        padding = 0
                                        
                                        AutoForm:
                                            model = loop_item

                                
            DockItem:
                title = "Operations"
                name = 'model1'
                Container:
                    padding = 0
                    OccViewer: viewer:
                        view_mode = 'top'
                        attr p0 = None
#                         on_mouse_press::
#                             display, event = change['value']
#                             #print 'mouse_press',event
#                             pt = event.pos()
#                             if event.button() == Qt.LeftButton:
#                                 display.Select(pt.x(), pt.y())
#                             #viewer.p0 = display.View.Convert(pt.x(),pt.y())
#                                 #raise StopIteration
                        on_mouse_move::
                            display, event = change['value']
                            pt = event.pos()
                            display.MoveTo(pt.x(),pt.y())
                            
                            #: Drag selected object
                            if event.buttons() == Qt.LeftButton:
                                p0 = viewer.p0
                                p1 =  display.View.Convert(pt.x(),pt.y())
                                viewer.p0 = p1
                                if viewer.selection and p0:
                                    dx,dy,dz = p1[0]-p0[0],p1[1]-p0[1],0 
                                    for item in viewer.selection:
                                        item.position = (item.x+dx,item.y+dy,item.z)
                                
                                    raise StopIteration
                            else:
                                viewer.p0 = None
                        #on_mouse_release::
                        #    display, event = change['value']
                        #    print 'mouse_release',event
                        #    raise StopIteration
                        #Common:
                       
                        Cut:
                            Box:
                                position = (-1, -1, 0)
                                dx = 2
                                dy = 2
                                dz = 1
                            Cone:
                                radius = 1
                                height = 5
                                 
                        Common:
                            Cylinder:
                                position = (4,4,0)
                                height = 4
                            Sphere:
                                position = (4,4,0)
                                radius = 2
                                
                        Fillet:
                            radius = 0.1
                            Box:
                                position = (-4,-4,0)
                                dx = 2
                                dy = 2
                                dz = 2
                            
                            
                            
                            #Cylinder:
                            #    radius = 1

                        #Include:
                        #    objects <<  [Model()]
                    Menu:
                        context_menu = True
                        Action:
                            text = 'Fit all'
                            triggered :: viewer.proxy.display.FitAll()
                        Menu:
                            title = 'View'
                            Looper:
                                iterable << viewer.get_member('view_mode').items
                                Action:
                                    text << loop_item
                                    triggered :: viewer.view_mode = loop_item
            DockItem:
                title = "Draw"
                name = 'model3'
                Container:
                    padding = 0
                    OccViewer: top_view:
                        view_mode = 'top'
                        Wire:
                            Circle:
                                radius = 10
                        Wire:
                            Ellipse:
                                x = - 10
                                major_radius = 10
                                minor_radius = 4
                        Wire:
                            #Circle:
                            #    radius = 4
                            Line:
                                Point:
                                    x = 4
                                    y = 0
                                Point:
                                    x = 10
                                    y = 10
#                             Line:
#                                 Point:
#                                     x = 10
#                                     y = 10
#                                 Point:
#                                     x = 0
#                                     y = 10
                    Menu:
                        context_menu = True
                        Action:
                            text = "Reset"
                            triggered :: top_view.proxy.display.View_Top()
                        
            DockItem:
                title = "Shapes"
                name = 'model2'
                Container:   
                    padding = 0      
                    OccViewer:
                        selection:: print change['value']
                        Looper:
                            iterable << range(1)
                            Box: box2:
                                position = (10,0,loop_item*10)
                                dx = 10
                                dy = 2
                                dz = 5
                                  
                            Cone: cone:
                                position = (0,10,loop_item*10)
                                radius = 1
                                height = 5
                              
                            Cylinder: cylinder:
                                position = (10,10,loop_item*10)
                                radius = 2
                                #angle = math.pi/2.0
                                  
                            Sphere: sphere:
                                position = (0,0,loop_item*10)
                                radius = 3
                                #angle = 1.5*math.pi
                                  
                            Wedge: wedge:
                                position = (-10,0,loop_item*10)
                                dy = 2
                              
                            Torus:
                                position = (-10,-10,loop_item*10)
                                radius = 2
                                radius2 = 0.4
                                angle = math.pi
