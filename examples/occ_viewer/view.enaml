import math
from atom.api import Atom
from enaml.layout.api import (
    HSplitLayout, VSplitLayout, TabLayout, InsertItem, 
    hbox, vbox, spacer
)
from enaml.widgets.api import (
    Window, DockArea, DockItem,  Form, GroupBox, ScrollArea,
    Notebook, Page, 
    SpinBox, Container, Label, Menu, Action
)
from enaml.widgets.dock_events import DockItemEvent
from enaml.core.api import Conditional, Include, Looper, DynamicTemplate
#: TODO: Breaks proxy pattern...
from enaml.qt.QtCore import Qt
from enamlx.widgets.api import (
    OccViewer, TreeView, TreeViewItem, TreeViewColumn
)
from advanced import AutoForm

from occ.solid import Box, Cone, Cylinder, Sphere, Wedge, Torus
from occ.draw import Line, Wire, Circle, Ellipse, Parabola, Hyperbola, Point, Vertex
from occ.algo import Common, Cut, Fuse, Fillet, Chamfer, ThickSolid
from occ.shape import Shape



template TreeItemLoop(items):
    """ A templated loop which maps a template over a sequence."""
    TreeItemLoop(tuple(items[:-1])):
        pass
    AutoTreeItem:
        item = items[-1]
  
template TreeItemLoop(items: ()):
    """ The terminating condition for the templated loop."""
    pass

template AutoTreeItemNode(item):
    """ Template for tree item nodes. This defines
        the columns and how the tree will be walked.
    """
    TreeViewColumn:
        text << str(item)
    TreeItemLoop(tuple([c for c in item.children if isinstance(c,Shape)])):
        pass

enamldef AutoTreeItem(TreeViewItem):
    attr item
    text = str(item)
    items << [c for c in item.children if isinstance(c,Shape)]
    DynamicTemplate:
        base = AutoTreeItemNode
        args = (item,)

enamldef ModelViewer(OccViewer): viewer:
    attr p0 = None
#     on_mouse_press::
#         display, event = change['value']
#         #print 'mouse_press',event
#         pt = event.pos()
#         if event.button() == Qt.LeftButton:
#             display.Select(pt.x(), pt.y())
#         #viewer.p0 = display.View.Convert(pt.x(),pt.y())
#             #raise StopIteration
    on_mouse_move::
        display, event = change['value']
        pt = event.pos()
        display.MoveTo(pt.x(),pt.y())
        
        #: Drag selected object
        if event.buttons() == Qt.LeftButton:
            p0 = viewer.p0
            p1 =  display.View.Convert(pt.x(),pt.y())
            viewer.p0 = p1
            if viewer.selection and p0:
                dx,dy,dz = p1[0]-p0[0],p1[1]-p0[1],0 
                for item in viewer.selection:
                    item.position = (item.x+dx,item.y+dy,item.z)
            
                raise StopIteration
        else:
            viewer.p0 = None
    #on_mouse_release::
    #    display, event = change['value']
    #    print 'mouse_release',event
    #    raise StopIteration
    Menu:
        context_menu = True
        Action:
            text = 'Fit all'
            triggered :: viewer.proxy.display.FitAll()
        Menu:
            title = 'View'
            Looper:
                iterable << viewer.get_member('view_mode').items
                Action:
                    text << loop_item
                    triggered :: viewer.view_mode = loop_item


enamldef Main(Window): window:
    minimum_size = (960,540)
    #attr active_model = [Model()]
    attr viewer = None
    Container:
        padding = 0   
        DockArea:
            layout = HSplitLayout(
                    VSplitLayout(
                    'model',
                    'properties',
                ),
                TabLayout(
                    'viewer1',
                    'viewer2',
                    'viewer3'
                ),
                sizes=[10,90]
            )
            dock_events_enabled = True
            dock_event::
                event = change['value']
                if event.type==DockItemEvent.TabSelected:
                    item = self.find(event.name)
                    if event.name.startswith('viewer'):
                        viewer = item.children[0].children[0]
                        window.viewer = viewer
                        viewer.proxy.display.OnResize()
                #print event.name,event.type
            
            DockItem:
                title = 'Model'
                name = 'model'
                stretch = 0
                Container:
                    padding = 0
                    TreeView:
                        horizontal_headers = ['Item']
                        horizontal_stretch = True
                        items << [c for c in viewer.children if isinstance(c,Shape)] if viewer else []
                        selection :: 
                            if viewer:
                                viewer.selection = [node.item for node in change['value']]
                        Looper:
                            iterable << parent.items
                            AutoTreeItem:
                                item = loop_item
                                
            
            DockItem:
                title = 'Properties'
                name = 'properties'
                stretch = 0
                Container:
                    padding = 0
                    Conditional:
                        condition << viewer is not None
                        Looper:
                            iterable << viewer.selection
                            GroupBox:
                                title << "{}".format(loop_item)
                                AutoForm:
                                    model = loop_item

                                
            DockItem:
                title = "Operations"
                name = 'viewer1'
                Container:
                    padding = 0
                    ModelViewer: #viewer:
                        view_mode = 'top'

                        #Common:
                       
                        Cut:
                            Box:
                                position = (-1, -1, 0)
                                dx = 2
                                dy = 2
                                dz = 1
                            Cone:
                                radius = 1
                                height = 5
                                 
                        Common:
                            Cylinder:
                                position = (4,4,0)
                                height = 4
                            Sphere:
                                position = (4,4,0)
                                radius = 2
                                
                        Fillet:
                            radius = 0.1
                            Box:
                                position = (-4,-4,0)
                                dx = 2
                                dy = 2
                                dz = 2
                                
                        Chamfer:
                            distance = 0.1
                            Cylinder:
                                position = (-4,4,0)
                                radius = 2
                                
                        ThickSolid:
                            offset = 0.1
                            Box:
                                position = (4,-4,0)
                                
                            #ChamferEdge:
                            #    edge = parent.edges[0]
                                
                            
                            
                            #Cylinder:
                            #    radius = 1

                        #Include:
                        #    objects <<  [Model()]
                  
            DockItem:
                title = "Draw"
                name = 'viewer2'
                Container:
                    padding = 0
                    ModelViewer:
                        Wire:
                            Circle:
                                radius = 10
                        Wire:
                            Ellipse:
                                x = - 10
                                major_radius = 10
                                minor_radius = 4
                        Wire:
                            #Circle:
                            #    radius = 4
                            Line:
                                Point:
                                    x = 4
                                    y = 0
                                Point:
                                    x = 10
                                    y = 10
#                             Line:
#                                 Point:
#                                     x = 10
#                                     y = 10
#                                 Point:
#                                     x = 0
#                                     y = 10
                        
            DockItem:
                title = "Shapes"
                name = 'viewer3'
                Container:   
                    padding = 0      
                    ModelViewer:
                        selection:: print change['value']
                        Looper:
                            iterable << range(10)
                            Box: 
                                position = (10,0,loop_item*10)
                                dx = 10
                                dy = 2
                                dz = 5
                                  
                            Cone: 
                                position = (0,10,loop_item*10)
                                radius = 1
                                height = 5
                              
                            Cylinder: 
                                position = (10,10,loop_item*10)
                                radius = 2
                                #angle = math.pi/2.0
                                  
                            Sphere: 
                                position = (0,0,loop_item*10)
                                radius = 3
                                #angle = 1.5*math.pi
                                  
                            Wedge: 
                                position = (-10,0,loop_item*10)
                                dy = 2
                              
                            Torus:
                                position = (-10,-10,loop_item*10)
                                radius = 2
                                radius2 = 0.4
                                angle = math.pi
